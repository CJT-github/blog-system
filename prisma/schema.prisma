// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(50) @unique
  password String @db.VarChar(50)
  email String @db.VarChar(50)
  role Int @default(2) //1: 管理员，2：用户
  blogs Blog[] 
  comments Comment[] 
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}


model Blog {
  id Int @id @default(autoincrement())
  image String @db.VarChar(50) @unique
  title String @db.VarChar(50)
  desc String @db.VarChar(255)
  content String @db.Text
  published Boolean @default(false)
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  comments Comment[]
  categories BlogCategory[]
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}


model Comment {
  id Int @id @default(autoincrement())
  content String
  blogId Int
  blog Blog @relation(fields: [blogId], references: [id])
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}


model Category {
  id Int @id @default(autoincrement())
  key String @unique
  name String @unique
  blogs BlogCategory[]
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model BlogCategory {
  blogId Int
  categoryId Int
  blog Blog @relation(fields: [blogId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([blogId, categoryId])  // 联合主键
}